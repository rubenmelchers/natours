{"mappings":"ACAA,kBAAkB,GAElB,iDAAiD;AACjD,uCAAuC;AACvC,iDAAiD;AAEjD,MAAM,mCAAa,CAAA;IACjB,2CAA2C;IAC3C,MAAM,MAAM,EAAE,IAAI,OAAO;QAAE,aAAa;IAAM;IAE9C,qCAAqC;IACrC,EAAE,UAAU,sDAAsD;QAChE,aACE;IACJ,GAAG,MAAM;IAET,gDAAgD;IAChD,IAAI,YAAY,EAAE,KAAK;QACrB,SAAS;QACT,UAAU;YAAC;YAAI;SAAG;QAClB,YAAY;YAAC;YAAI;SAAG;QACpB,aAAa;YAAC;YAAG;SAAI,CAAC,oEAAoE;IAC5F;IAEA,2BAA2B;IAC3B,MAAM,SAAS,EAAE;IACjB,UAAU,QAAQ,CAAA;QAChB,gBAAgB;QAChB,OAAO,KAAK;YAAC,IAAI,WAAW,CAAC,EAAE;YAAE,IAAI,WAAW,CAAC,EAAE;SAAC;QAEpD,cAAc;QACd,EAAE,OAAO;YAAC,IAAI,WAAW,CAAC,EAAE;YAAE,IAAI,WAAW,CAAC,EAAE;SAAC,EAAE;YAAE,MAAM;QAAU,GAClE,MAAM,IACP,YAAY;SACX,UAAU,CAAC,OAAO,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,YAAY,IAAI,CAAC,EAAE;YACtD,WAAW;YACX,WAAW;QACb,GACC;IACL;IAEA,6CAA6C;IAC7C,MAAM,SAAS,EAAE,aAAa,QAAQ,IAAI;IAC1C,IAAI,UAAU;IAEd,wBAAwB;IACxB,IAAI,gBAAgB;AACtB;IAEA,2CAAe;;ADjDf,kBAAkB;AAIlB,MAAM,4BAAM,SAAS,eAAe;AAEpC,+BAA+B;AAE/B,IAAI,2BAAK;IACP,MAAM,YAAY,KAAK,MAAM,0BAAI,QAAQ;IACzC,CAAA,GAAA,wCAAS,EAAE;AACb","sources":["public/js/index.js","public/js/leaflet.js"],"sourcesContent":["/* eslint-disable */\n\nimport displayMap from './leaflet.js';\n\nconst map = document.getElementById('map');\n\n// Display the map if it exists\n\nif (map) {\n  const locations = JSON.parse(map.dataset.locations);\n  displayMap(locations);\n}\n","/* eslint-disable */\n\n// ----------------------------------------------\n// Function to display map on tour page\n// ----------------------------------------------\n\nconst displayMap = locations => {\n  // Create the map and attach it to the #map\n  const map = L.map('map', { zoomControl: false });\n\n  // Add a tile layer to add to our map\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution:\n      '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n  }).addTo(map);\n\n  // Create icon using the image provided by Jonas\n  var greenIcon = L.icon({\n    iconUrl: '/img/pin.png',\n    iconSize: [32, 40], // size of the icon\n    iconAnchor: [16, 40], // point of the icon which will correspond to marker's location\n    popupAnchor: [0, -50] // point from which the popup should open relative to the iconAnchor\n  });\n\n  // Add locations to the map\n  const points = [];\n  locations.forEach(loc => {\n    // Create points\n    points.push([loc.coordinates[1], loc.coordinates[0]]);\n\n    // Add markers\n    L.marker([loc.coordinates[1], loc.coordinates[0]], { icon: greenIcon })\n      .addTo(map)\n      // Add popup\n      .bindPopup(`<p>Day ${loc.day}: ${loc.description}</p>`, {\n        autoClose: false,\n        className: 'mapPopup'\n      })\n      .openPopup();\n  });\n\n  // Set map bounds to include current location\n  const bounds = L.latLngBounds(points).pad(0.5);\n  map.fitBounds(bounds);\n\n  // Disable scroll on map\n  map.scrollWheelZoom.disable();\n};\n\nexport default displayMap;\n"],"names":[],"version":3,"file":"app.js.map"}